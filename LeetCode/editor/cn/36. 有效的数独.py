# 36. 有效的数独
#
# 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。 
# 
#  
#  数字 1-9 在每一行只能出现一次。 
#  数字 1-9 在每一列只能出现一次。 
#  数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。 
#  
#
#  上图是一个部分填充的有效的数独。 
# 
#  数独部分空格内已填入了数字，空白格用 '.' 表示。 
# 
#  示例 1: 
# 
#  输入:
# [
#   ["5","3",".",".","7",".",".",".","."],
#   ["6",".",".","1","9","5",".",".","."],
#   [".","9","8",".",".",".",".","6","."],
#   ["8",".",".",".","6",".",".",".","3"],
#   ["4",".",".","8",".","3",".",".","1"],
#   ["7",".",".",".","2",".",".",".","6"],
#   [".","6",".",".",".",".","2","8","."],
#   [".",".",".","4","1","9",".",".","5"],
#   [".",".",".",".","8",".",".","7","9"]
# ]
# 输出: true
#
#  示例 2: 
# 
#  输入:
# [
#   ["8","3",".",".","7",".",".",".","."],
#   ["6",".",".","1","9","5",".",".","."],
#   [".","9","8",".",".",".",".","6","."],
#   ["8",".",".",".","6",".",".",".","3"],
#   ["4",".",".","8",".","3",".",".","1"],
#   ["7",".",".",".","2",".",".",".","6"],
#   [".","6",".",".",".",".","2","8","."],
#   [".",".",".","4","1","9",".",".","5"],
#   [".",".",".",".","8",".",".","7","9"]
# ]
# 输出: false
# 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
#      但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。 
# 
#  说明: 
#
#  一个有效的数独（部分已被填充）不一定是可解的。 
#  只需要根据以上规则，验证已经填入的数字是否有效即可。 
#  给定数独序列只包含数字 1-9 和字符 '.' 。 
#  给定数独永远是 9x9 形式的。 
#  
#  Related Topics 哈希表 
#  👍 432 👎 0


# leetcode submit region begin(Prohibit modification and deletion)
class Solution:
    def isValidSudoku(self, board: [[str]]) -> bool:
        row_cache = set()
        col_cache = {key: set() for key in range(9)}
        box_cache = {key: set() for key in range(9)}

        for row in range(9):
            for col in range(9):
                value = board[row][col]
                # 当value为数字时
                if value != ".":
                    # 行判断
                    if value in row_cache:
                        # print(row, col, "row")
                        return False
                    else:
                        row_cache.add(value)
                    # 列判断
                    if value in col_cache[col]:
                        # print(row, col, "col")
                        return False
                    else:
                        col_cache[col].add(value)
                    # 小框判断,这里注意小框的序号
                    box_n = (row // 3 * 3) + (col // 3)
                    if value in box_cache[box_n]:
                        # print(row, col, "box")
                        return False
                    else:
                        box_cache[box_n].add(value)
                # 列为8，则完成一行扫描，要清空行集合,注意这里要在判断是否为"."之外
                if col == 8:
                    row_cache.clear()
        return True


# if __name__ == '__main__':
#     solution = Solution()
#     board = [["5", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."],
#              [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
#              ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
#              [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"],
#              [".", ".", ".", ".", "8", ".", ".", "7", "9"]]
#     print(solution.isValidSudoku(board))

# leetcode submit region end(Prohibit modification and deletion)
